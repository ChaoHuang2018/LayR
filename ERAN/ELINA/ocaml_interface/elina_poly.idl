/*
 *
 *  This source file is part of ELINA (ETH LIbrary for Numerical Analysis).
 *  ELINA is Copyright Â© 2019 Department of Computer Science, ETH Zurich
 *  This software is distributed under GNU Lesser General Public License Version 3.0.
 *  For more information, see the ELINA project website at:
 *  http://elina.ethz.ch
 *
 *  THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 *  EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 *  THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 *  IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 *  TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL ETH ZURICH BE LIABLE FOR ANY     
 *  DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 *  SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 *  ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 *  CONTRACT, TORT OR OTHERWISE).
 *
 */

quote(C,"#include \"opt_pk.h\"")
quote(C,"#include \"ap_manager.h\"")
quote(C,"#include \"apron_caml.h\"")

quote(C,"typedef struct opt_pk_internal_t* internal_ptr;")

import "manager.idl";

typedef [abstract] struct opt_pk_internal_t* internal_ptr;

quote(MLMLI,"(** Convex Polyhedra and Linear Equalities abstract domains *)")

quote(MLMLI,"
type loose
type strict
  (** Two flavors for convex polyhedra: loose or strict.

      Loose polyhedra cannot have strict inequality constraints like [x>0].
      They are algorithmically more efficient
      (less generators, simpler normalization).

      Convex polyhedra are defined by the conjunction of a set of linear
      constraints of the form [a_0*x_0 + ... + a_n*x_n + b >= 0] or
      [a_0*x_0 + ... + a_n*x_n + b > 0]
      where [a_0, ..., a_n, b, c] are constants and [x_0, ..., x_n] variables.
  *)
type 'a t
(** Type of convex polyhedra/linear equalities, where ['a] is [loose], [strict] or [equalities].

    Abstract values which are convex polyhedra have the type
    [(loose t) Apron.Abstract0.t] or [(loose t) Apron.Abstract1.t] or
    [(strict t) Apron.Abstract0.t] or [(strict t) Apron.Abstract1.t].

    Abstract values which are conjunction of linear equalities have the type
    [(equalities t) Apron.Abstract0.t] or [(equalities t) Apron.Abstract1.t].

    Managers allocated by ELINA have the type ['a t Apron.Manager.t].
*)
")

quote(MLI,"(** Create an ELINA manager for loose convex polyhedra. *)")
ap_manager_ptr elina_poly_manager_alloc_loose()
quote(call,"
_res = opt_pk_manager_alloc(false);
{ ap_exc_t i;
for (i=1; i<AP_EXC_SIZE; i++){
ap_manager_set_abort_if_exception(_res,i,false);
}}
");

quote(MLI,"(** Create aa ELINA manager for strict convex polyhedra. *)")
ap_manager_ptr elina_poly_manager_alloc_strict()
quote(call,"_res = opt_pk_manager_alloc(true);
{ ap_exc_t i;
for (i=1; i<AP_EXC_SIZE; i++){
ap_manager_set_abort_if_exception(_res,i,false);
}}
");


quote(MLI,"(** {2 Type conversions} *)

val manager_is_elina_poly : 'a Apron.Manager.t -> bool
val manager_is_elina_poly_loose : 'a Apron.Manager.t -> bool
val manager_is_elina_poly_strict : 'a Apron.Manager.t -> bool


val manager_of_elina_poly : 'a t Apron.Manager.t -> 'b Apron.Manager.t
val manager_of_elina_poly_loose : loose t Apron.Manager.t -> 'a Apron.Manager.t
val manager_of_elina_poly_strict : strict t Apron.Manager.t -> 'a Apron.Manager.t


val manager_to_elina_poly : 'a Apron.Manager.t -> 'b t Apron.Manager.t
val manager_to_elina_poly_loose : 'a Apron.Manager.t -> loose t Apron.Manager.t
val manager_to_elina_poly_strict : 'a Apron.Manager.t -> strict t Apron.Manager.t


module Abstract0 : sig
  val is_elina_poly : 'a Apron.Abstract0.t -> bool
  val is_elina_poly_loose : 'a Apron.Abstract0.t -> bool
  val is_elina_poly_strict : 'a Apron.Abstract0.t -> bool
  
  val of_elina_poly : 'a t Apron.Abstract0.t -> 'b Apron.Abstract0.t
  val of_elina_poly_loose : loose t Apron.Abstract0.t -> 'a Apron.Abstract0.t
  val of_elina_poly_strict : strict t Apron.Abstract0.t -> 'a Apron.Abstract0.t
  
  val to_elina_poly : 'a Apron.Abstract0.t -> 'b t Apron.Abstract0.t
  val to_elina_poly_loose : 'a Apron.Abstract0.t -> loose t Apron.Abstract0.t
  val to_elina_poly_strict : 'a Apron.Abstract0.t -> strict t Apron.Abstract0.t
end

module Abstract1 : sig
  val is_elina_poly : 'a Apron.Abstract1.t -> bool
  val is_elina_poly_loose : 'a Apron.Abstract1.t -> bool
  val is_elina_poly_strict : 'a Apron.Abstract1.t -> bool

  val of_elina_poly : 'a t Apron.Abstract1.t -> 'b Apron.Abstract1.t
  val of_elina_poly_loose : loose t Apron.Abstract1.t -> 'a Apron.Abstract1.t
  val of_elina_poly_strict : strict t Apron.Abstract1.t -> 'a Apron.Abstract1.t

  val to_elina_poly : 'a Apron.Abstract1.t -> 'b t Apron.Abstract1.t
  val to_elina_poly_loose : 'a Apron.Abstract1.t -> loose t Apron.Abstract1.t
  val to_elina_poly_strict : 'a Apron.Abstract1.t -> strict t Apron.Abstract1.t
end
")

quote(ML,"
let manager_is_elina_poly man =
  let str = Apron.Manager.get_library man in
  let str =
    try String.sub str 0 5
    with Invalid_argument _ -> \"\"
  in
  (String.compare str \"elina_poly\")==0
let manager_of_elina_poly (man:'a t Apron.Manager.t) : 'b Apron.Manager.t = Obj.magic man
let manager_to_elina_poly (man:'a Apron.Manager.t) : 'b t Apron.Manager.t =
  if manager_is_elina_poly man then
    Obj.magic man
  else
    failwith \"Elina_poly.to_elina_poly: the argument manager is not an Elina_poly manager\"

let manager_is_elina_poly_loose man =
  let str = Apron.Manager.get_library man in
  (String.compare str \"elina_poly, loose mode\")==0
let manager_of_elina_poly_loose (man:loose t Apron.Manager.t) : 'a Apron.Manager.t = Obj.magic man
let manager_to_elina_poly_loose (man:'a Apron.Manager.t) : loose t Apron.Manager.t =
  if manager_is_elina_poly_loose man then
    Obj.magic man
  else
    failwith \"Elina_poly.to_elina_poly_loose: the argument manager is not a loose Elina_poly manager\"

let manager_is_elina_poly_strict man =
  let str = Apron.Manager.get_library man in
  (String.compare str \"elina_poly, strict mode\")==0
let manager_of_elina_poly_strict (man:strict t Apron.Manager.t) : 'a Apron.Manager.t = Obj.magic man
let manager_to_elina_poly_strict (man:'a Apron.Manager.t) : strict t Apron.Manager.t =
  if manager_is_elina_poly_strict man then
    Obj.magic man
  else
    failwith \"Elina_poly.to_elina_poly_strict: the argument manager is not a strict Elina_poly manager\"


module Abstract0 = struct
  let is_elina_poly abs =
    manager_is_elina_poly (Apron.Abstract0.manager abs)
  let is_elina_poly_loose abs =
    manager_is_elina_poly_loose (Apron.Abstract0.manager abs)
  let is_elina_poly_strict abs =
    manager_is_elina_poly (Apron.Abstract0.manager abs)

  let of_elina_poly (abs: 'a t Apron.Abstract0.t) : 'b Apron.Abstract0.t = Obj.magic abs
  let of_elina_poly_loose (abs: loose t Apron.Abstract0.t) : 'a Apron.Abstract0.t = Obj.magic abs
  let of_elina_poly_strict (abs: strict t Apron.Abstract0.t) : 'a Apron.Abstract0.t = Obj.magic abs

  let to_elina_poly (abs:'a Apron.Abstract0.t) : 'b t Apron.Abstract0.t =
    if is_elina_poly abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract0.to_elina_poly: the argument value is not a elina_poly value\"
  let to_elina_poly_loose (abs:'a Apron.Abstract0.t) : loose t Apron.Abstract0.t =
    if is_elina_poly_loose abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract0.to_elina_poly_loose: the argument value is not a loose elina_poly value\"
  let to_elina_poly_strict (abs:'a Apron.Abstract0.t) : strict t Apron.Abstract0.t =
    if is_elina_poly_strict abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract0.to_elina_poly_strict: the argument value is not a strict elina_poly value\"
end

module Abstract1 = struct
  let is_elina_poly abs =
    manager_is_elina_poly (Apron.Abstract1.manager abs)
  let is_elina_poly_loose abs =
    manager_is_elina_poly_loose (Apron.Abstract1.manager abs)
  let is_elina_poly_strict abs =
    manager_is_elina_poly (Apron.Abstract1.manager abs)

  let of_elina_poly (abs: 'a t Apron.Abstract1.t) : 'b Apron.Abstract1.t = Obj.magic abs
  let of_elina_poly_loose (abs: loose t Apron.Abstract1.t) : 'a Apron.Abstract1.t = Obj.magic abs
  let of_elina_poly_strict (abs: strict t Apron.Abstract1.t) : 'a Apron.Abstract1.t = Obj.magic abs

  let to_elina_poly (abs:'a Apron.Abstract1.t) : 'b t Apron.Abstract1.t =
    if is_elina_poly abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract1.to_elina_poly: the argument value is not a elina_poly value\"
  let to_elina_poly_loose (abs:'a Apron.Abstract1.t) : loose t Apron.Abstract1.t =
    if is_elina_poly_loose abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract1.to_elina_poly_loose: the argument value is not a loose elina_poly value\"
  let to_elina_poly_strict (abs:'a Apron.Abstract1.t) : strict t Apron.Abstract1.t =
    if is_elina_poly_strict abs then
      Obj.magic abs
    else
      failwith \"Elina_poly.Abstract1.to_elina_poly_strict: the argument value is not a strict elina_poly value\"
end
")

quote(MLI,"\n(**
{2 Compilation information}

See {!Introduction.compilation} for complete explanations. 
We just show examples with the file [mlexample.ml].

{3 Bytecode compilation}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma elina_poly.cma mlexample.ml]}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -make-runtime -o myrun \\
  bigarray.cma gmp.cma apron.cma elina_poly.cma

ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -use-runtime myrun -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma elina_poly.cma mlexample.ml ]}

{3 Native-code compilation}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa elina_poly.cmxa mlexample.ml ]}

{3 Without auto-linking feature}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -noautolink -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa elina_poly.cmxa mlexample.ml \\
  -cclib \"-L$MLGMPIDL_PREFIX/lib -L$APRON_PREFIX/lib \\
	  -loptpoly_caml_debug -loptpoly \\
	  -lapron_caml_debug -lapron_debug \\
	  -lgmp_caml $MPFR_LIB_FLAG -lmpfr $GMP_LIB_FLAG -lgmp \\
	  -L$CAMLIDL_PREFIX/lib/ocaml -lcamlidl \\
	  -lbigarray\" ]}

*)")
